name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
  schedule:
  # Run every 6 days to help us stay on our toes
  - cron: '0 0 */6 * *'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt install -y xvfb yarn

      - name: Run yarn
        run: |
          yarn install --frozen-lockfile
          yarn lint
          yarn typecheck
          yarn build
          xvfb-run --auto-servernum yarn test:ci

  deploy-electron:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          suffix: macos
          extension: dmg

        - os: ubuntu-latest
          suffix: linux
          extension: AppImage

        - os: windows-latest
          suffix: windows
          extension: exe
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Use node to install yarn in all OSs
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Build electron
        run: |
          npm install --global yarn
          yarn install --frozen-lockfile
          yarn build
          yarn deploy:electron

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: cockpit-${{ matrix.suffix }}
          path: dist/cockpit*.${{ matrix.extension }}
          if-no-files-found: error

  deploy-blueos-extension:
    needs: test
    runs-on: ubuntu-latest
    env:
      PLATFORMS: "linux/arm/v7,linux/arm64/v8,linux/amd64"
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

    steps:
      - name: Login to Docker Hub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prepare
        run: |
          # Deploy image with the name of the branch, if the build is a git tag, replace tag with the tag name.
          # If git tag matches semver, append latest tag to the push.
          DOCKER_IMAGE=${DOCKER_USERNAME:-bluerobotics}/cockpit
          VERSION=${GITHUB_REF##*/}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args:: \
            ${TAGS} \
            --file Dockerfile .

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Docker Buildx (build)
        run: |
          docker buildx build \
            --output "type=image,push=false" \
            --platform $PLATFORMS \
            ${{ steps.prepare.outputs.buildx_args }}

      - name: Docker Buildx (push)
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build \
            --output "type=image,push=true" \
            --platform $PLATFORMS \
            ${{ steps.prepare.outputs.buildx_args }}

      - name: Inspect image
        if: always() && github.event_name != 'pull_request'
        run: |
          docker buildx imagetools \
            inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}